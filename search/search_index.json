{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Projectile Motion: Analysis and Simulation Motivation Projectile motion, while seemingly simple, offers a rich playground for exploring fundamental principles of physics. The problem is straightforward: analyze how the range of a projectile depends on its angle of projection. Yet, beneath this simplicity lies a complex and versatile framework. The equations governing projectile motion involve both linear and quadratic relationships, making them accessible yet deeply insightful. What makes this topic particularly compelling is the number of free parameters involved in these equations, such as initial velocity, gravitational acceleration, and launch height. These parameters give rise to a diverse set of solutions that can describe a wide array of real-world phenomena, from the arc of a soccer ball to the trajectory of a rocket. 1. Theoretical Foundation Projectile motion describes the trajectory of an object launched into the air, subject only to gravity in the idealized case. We start with Newton\u2019s second law to derive the governing equations, assuming no air resistance. Derivation of Equations of Motion We consider a projectile launched with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) from the horizontal, with gravity acting downward ( \\(a_y = -g\\) ). Coordinate System and Initial Conditions X-axis : Horizontal direction (positive rightward). Y-axis : Vertical direction (positive upward). Initial velocity components: \\(v_x(0) = v_0 \\cos\\theta\\) \\(v_y(0) = v_0 \\sin\\theta\\) Initial position: \\((x_0, y_0) = (0, 0)\\) . Equations of Motion The only force is gravity, acting along the y-axis ( \\(a_y = -g\\) ), with \\(a_x = 0\\) . Horizontal Motion (constant velocity): $$ \\frac{d^2 x(t)}{dt^2} = 0 \\quad \\text{(no acceleration in x-direction)} \\frac{dx(t)}{dt} = v_0 \\cos\\theta $$ Integrating: [ x(t) = v_0 \\cos\\theta \\cdot t ] Vertical Motion (constant acceleration): $$ \\frac{d^2 y(t)}{dt^2} = -g \\frac{dy(t)}{dt} = v_0 \\sin\\theta - g t $$ Integrating again: $$ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ These are the parametric equations of motion, forming a parabolic trajectory. Family of Solutions The parameters ( \\(v_0, \\theta, g\\) ) define a family of solutions: - Initial Velocity ( \\(v_0\\) ) : Higher \\(v_0\\) increases the parabola\u2019s width and height. - Angle ( \\(\\theta\\) ) : Affects the balance between horizontal and vertical components. - Gravity ( \\(g\\) ) : Stronger gravity compresses the trajectory vertically. 2. Analysis of the Range The horizontal range \\(R\\) is the distance traveled when the projectile returns to \\(y = 0\\) . Range Derivation Set \\(y(t) = 0\\) : $$ 0 = (v_0 \\sin\\theta) t - \\frac{1}{2} g t^2 $$ $$ t \\left( v_0 \\sin\\theta - \\frac{1}{2} g t \\right) = 0 $$ Solutions: \\(t = 0\\) (launch) or \\(t = \\frac{2 v_0 \\sin\\theta}{g}\\) (landing). Substitute into \\(x(t)\\) : \\[ R = x\\left(\\frac{2 v_0 \\sin\\theta}{g}\\right) = (v_0 \\cos\\theta) \\cdot \\frac{2 v_0 \\sin\\theta}{g} = \\frac{2 v_0^2 \\sin\\theta \\cos\\theta}{g} \\] Using \\(2 \\sin\\theta \\cos\\theta = \\sin 2\\theta\\) : $$ R = \\frac{v_0^2 \\sin 2\\theta}{g} $$ Dependence on Angle ( \\(\\theta\\) ) Maximum range at \\(\\theta = 45^\\circ\\) ( \\(\\sin 2\\theta = 1\\) ): \\(R_{\\text{max}} = \\frac{v_0^2}{g}\\) . \\(R = 0\\) at \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) . Complementary angles (e.g., \\(30^\\circ\\) and \\(60^\\circ\\) ) yield the same range. Influence of Other Parameters Initial Velocity ( \\(v_0\\) ) : \\(R \\propto v_0^2\\) . Gravity ( \\(g\\) ) : \\(R \\propto \\frac{1}{g}\\) . 3. Practical Applications Sports : Optimizing a basketball shot or golf ball flight. Engineering : Designing artillery or water fountains. Astrophysics : Approximating low-altitude satellite trajectories. Extensions Uneven Terrain : Adjust landing condition for height \\(h\\) . Air Resistance : Add drag force, solve numerically. 4. Implementation Below is a Python script to simulate and visualize projectile motion, including range vs. angle and trajectory plots. import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # m/s^2 # Function to calculate range def projectile_range(v0, theta_deg, g=9.81): theta = np.radians(theta_deg) return (v0**2 * np.sin(2 * theta)) / g # Simulation parameters v0_values = [10, 15, 20] # Initial velocities (m/s) theta_deg = np.arange(0, 91, 1) # Angles from 0 to 90 degrees # Plot range vs angle for different v0 plt.figure(figsize=(10, 6)) for v0 in v0_values: R = [projectile_range(v0, t) for t in theta_deg] plt.plot(theta_deg, R, label=f'v0 = {v0} m/s') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs Angle of Projection') plt.legend() plt.grid(True) plt.show() # Trajectory simulation for v0 = 15 m/s, theta = 45\u00b0 v0 = 15 theta = np.radians(45) t_flight = 2 * v0 * np.sin(theta) / g t = np.linspace(0, t_flight, 100) x = v0 * np.cos(theta) * t y = v0 * np.sin(theta) * t - 0.5 * g * t**2 plt.figure(figsize=(10, 6)) plt.plot(x, y, label='Trajectory (v0 = 15 m/s, \u03b8 = 45\u00b0)') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Height (m)') plt.title('Projectile Trajectory') plt.legend() plt.grid(True) plt.show() Outputs Range vs Angle Plot : Shows how range varies with angle for different initial velocities, peaking at 45\u00b0. Trajectory Plot : Displays the parabolic path for \\(v_0 = 15 \\, \\text{m/s}, \\theta = 45^\\circ\\) . 5. Discussion Limitations Assumes no air resistance, flat terrain, and constant gravity. Real-world trajectories deviate due to drag and wind. Suggestions Drag : Add a \\(-k v\\) term and solve numerically. Wind : Include a horizontal force. Terrain : Adjust \\(y(t)\\) for variable ground height. This analysis and simulation highlight projectile motion\u2019s elegance and adaptability, bridging theory and application across diverse fields. Explanation of Changes Theoretical Foundation : The derivation now exactly matches your friend's screenshot, including the use of \\frac for fractions in the equations (e.g., \\(\\frac{d^2 x(t)}{dt^2}\\) , \\(\\frac{1}{2} g t^2\\) ). Consistency : Ensured that the notation and structure align with the screenshot while maintaining clarity in English. Simulation Code : Kept the corrected Python script from the previous response, ensuring it runs without errors. Outputs : Described the graphical outputs as required. Discussion : Included limitations and suggestions for extensions, addressing real-world factors like drag and wind.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#projectile-motion-analysis-and-simulation","text":"","title":"Projectile Motion: Analysis and Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"Projectile motion, while seemingly simple, offers a rich playground for exploring fundamental principles of physics. The problem is straightforward: analyze how the range of a projectile depends on its angle of projection. Yet, beneath this simplicity lies a complex and versatile framework. The equations governing projectile motion involve both linear and quadratic relationships, making them accessible yet deeply insightful. What makes this topic particularly compelling is the number of free parameters involved in these equations, such as initial velocity, gravitational acceleration, and launch height. These parameters give rise to a diverse set of solutions that can describe a wide array of real-world phenomena, from the arc of a soccer ball to the trajectory of a rocket.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion describes the trajectory of an object launched into the air, subject only to gravity in the idealized case. We start with Newton\u2019s second law to derive the governing equations, assuming no air resistance.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#derivation-of-equations-of-motion","text":"We consider a projectile launched with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) from the horizontal, with gravity acting downward ( \\(a_y = -g\\) ).","title":"Derivation of Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#coordinate-system-and-initial-conditions","text":"X-axis : Horizontal direction (positive rightward). Y-axis : Vertical direction (positive upward). Initial velocity components: \\(v_x(0) = v_0 \\cos\\theta\\) \\(v_y(0) = v_0 \\sin\\theta\\) Initial position: \\((x_0, y_0) = (0, 0)\\) .","title":"Coordinate System and Initial Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#equations-of-motion","text":"The only force is gravity, acting along the y-axis ( \\(a_y = -g\\) ), with \\(a_x = 0\\) . Horizontal Motion (constant velocity): $$ \\frac{d^2 x(t)}{dt^2} = 0 \\quad \\text{(no acceleration in x-direction)} \\frac{dx(t)}{dt} = v_0 \\cos\\theta $$ Integrating: [ x(t) = v_0 \\cos\\theta \\cdot t ] Vertical Motion (constant acceleration): $$ \\frac{d^2 y(t)}{dt^2} = -g \\frac{dy(t)}{dt} = v_0 \\sin\\theta - g t $$ Integrating again: $$ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ These are the parametric equations of motion, forming a parabolic trajectory.","title":"Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#family-of-solutions","text":"The parameters ( \\(v_0, \\theta, g\\) ) define a family of solutions: - Initial Velocity ( \\(v_0\\) ) : Higher \\(v_0\\) increases the parabola\u2019s width and height. - Angle ( \\(\\theta\\) ) : Affects the balance between horizontal and vertical components. - Gravity ( \\(g\\) ) : Stronger gravity compresses the trajectory vertically.","title":"Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The horizontal range \\(R\\) is the distance traveled when the projectile returns to \\(y = 0\\) .","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-derivation","text":"Set \\(y(t) = 0\\) : $$ 0 = (v_0 \\sin\\theta) t - \\frac{1}{2} g t^2 $$ $$ t \\left( v_0 \\sin\\theta - \\frac{1}{2} g t \\right) = 0 $$ Solutions: \\(t = 0\\) (launch) or \\(t = \\frac{2 v_0 \\sin\\theta}{g}\\) (landing). Substitute into \\(x(t)\\) : \\[ R = x\\left(\\frac{2 v_0 \\sin\\theta}{g}\\right) = (v_0 \\cos\\theta) \\cdot \\frac{2 v_0 \\sin\\theta}{g} = \\frac{2 v_0^2 \\sin\\theta \\cos\\theta}{g} \\] Using \\(2 \\sin\\theta \\cos\\theta = \\sin 2\\theta\\) : $$ R = \\frac{v_0^2 \\sin 2\\theta}{g} $$","title":"Range Derivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#dependence-on-angle-theta","text":"Maximum range at \\(\\theta = 45^\\circ\\) ( \\(\\sin 2\\theta = 1\\) ): \\(R_{\\text{max}} = \\frac{v_0^2}{g}\\) . \\(R = 0\\) at \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) . Complementary angles (e.g., \\(30^\\circ\\) and \\(60^\\circ\\) ) yield the same range.","title":"Dependence on Angle (\\(\\theta\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#influence-of-other-parameters","text":"Initial Velocity ( \\(v_0\\) ) : \\(R \\propto v_0^2\\) . Gravity ( \\(g\\) ) : \\(R \\propto \\frac{1}{g}\\) .","title":"Influence of Other Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports : Optimizing a basketball shot or golf ball flight. Engineering : Designing artillery or water fountains. Astrophysics : Approximating low-altitude satellite trajectories.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#extensions","text":"Uneven Terrain : Adjust landing condition for height \\(h\\) . Air Resistance : Add drag force, solve numerically.","title":"Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"Below is a Python script to simulate and visualize projectile motion, including range vs. angle and trajectory plots. import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # m/s^2 # Function to calculate range def projectile_range(v0, theta_deg, g=9.81): theta = np.radians(theta_deg) return (v0**2 * np.sin(2 * theta)) / g # Simulation parameters v0_values = [10, 15, 20] # Initial velocities (m/s) theta_deg = np.arange(0, 91, 1) # Angles from 0 to 90 degrees # Plot range vs angle for different v0 plt.figure(figsize=(10, 6)) for v0 in v0_values: R = [projectile_range(v0, t) for t in theta_deg] plt.plot(theta_deg, R, label=f'v0 = {v0} m/s') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs Angle of Projection') plt.legend() plt.grid(True) plt.show() # Trajectory simulation for v0 = 15 m/s, theta = 45\u00b0 v0 = 15 theta = np.radians(45) t_flight = 2 * v0 * np.sin(theta) / g t = np.linspace(0, t_flight, 100) x = v0 * np.cos(theta) * t y = v0 * np.sin(theta) * t - 0.5 * g * t**2 plt.figure(figsize=(10, 6)) plt.plot(x, y, label='Trajectory (v0 = 15 m/s, \u03b8 = 45\u00b0)') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Height (m)') plt.title('Projectile Trajectory') plt.legend() plt.grid(True) plt.show()","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#outputs","text":"Range vs Angle Plot : Shows how range varies with angle for different initial velocities, peaking at 45\u00b0. Trajectory Plot : Displays the parabolic path for \\(v_0 = 15 \\, \\text{m/s}, \\theta = 45^\\circ\\) .","title":"Outputs"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-discussion","text":"","title":"5. Discussion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations","text":"Assumes no air resistance, flat terrain, and constant gravity. Real-world trajectories deviate due to drag and wind.","title":"Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#suggestions","text":"Drag : Add a \\(-k v\\) term and solve numerically. Wind : Include a horizontal force. Terrain : Adjust \\(y(t)\\) for variable ground height. This analysis and simulation highlight projectile motion\u2019s elegance and adaptability, bridging theory and application across diverse fields.","title":"Suggestions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#explanation-of-changes","text":"Theoretical Foundation : The derivation now exactly matches your friend's screenshot, including the use of \\frac for fractions in the equations (e.g., \\(\\frac{d^2 x(t)}{dt^2}\\) , \\(\\frac{1}{2} g t^2\\) ). Consistency : Ensured that the notation and structure align with the screenshot while maintaining clarity in English. Simulation Code : Kept the corrected Python script from the previous response, ensuring it runs without errors. Outputs : Described the graphical outputs as required. Discussion : Included limitations and suggestions for extensions, addressing real-world factors like drag and wind.","title":"Explanation of Changes"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 1. Theoretical Foundation Differential Equation of the Forced Damped Pendulum The motion of a forced damped pendulum is governed by the following nonlinear differential equation: \\[ \\frac{d^2 \\theta}{dt^2} + b \\frac{d \\theta}{dt} + \\frac{g}{L} \\sin \\theta = A \\cos(\\omega t) \\] Where: - \\(\\theta\\) : Angular displacement of the pendulum (radians). - \\(\\frac{d\\theta}{dt}\\) : Angular velocity ( \\(\\dot{\\theta}\\) ). - \\(\\frac{d^2\\theta}{dt^2}\\) : Angular acceleration ( \\(\\ddot{\\theta}\\) ). - \\(b\\) : Damping coefficient (s \\(^{-1}\\) ). - \\(g\\) : Gravitational acceleration ( \\(9.8 \\, \\text{m/s}^2\\) ). - \\(L\\) : Length of the pendulum (m). - \\(A\\) : Amplitude of the external driving force (rad/s \\(^2\\) ). - \\(\\omega\\) : Driving frequency (rad/s). - \\(t\\) : Time (s). To simplify, we define: - Natural frequency: \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) , - Damping parameter: \\(\\beta = b\\) , - Driving amplitude: \\(f = A\\) . Thus, the equation can be rewritten as: \\[ \\ddot{\\theta} + \\beta \\dot{\\theta} + \\omega_0^2 \\sin\\theta = f \\cos(\\omega t) \\] Small-Angle Approximation For small angles ( \\(\\theta \\ll 1\\) ), we can approximate \\(\\sin\\theta \\approx \\theta\\) . This linearizes the equation: \\[ \\ddot{\\theta} + \\beta \\dot{\\theta} + \\omega_0^2 \\theta = f \\cos(\\omega t) \\] This is the equation of a forced damped harmonic oscillator. The homogeneous solution (without forcing) is: \\[ \\theta_h(t) = e^{-\\frac{\\beta}{2} t} \\left( A_1 \\cos(\\omega_d t) + A_2 \\sin(\\omega_d t) \\right) \\] Where \\(\\omega_d = \\sqrt{\\omega_0^2 - \\left(\\frac{\\beta}{2}\\right)^2}\\) is the damped angular frequency, and \\(A_1\\) and \\(A_2\\) are constants determined by initial conditions. The particular solution (due to the forcing term \\(f \\cos(\\omega t)\\) ) can be found using the method of undetermined coefficients. Assume a solution of the form: \\[ \\theta_p(t) = C \\cos(\\omega t) + D \\sin(\\omega t) \\] Substitute into the linearized equation, solve for \\(C\\) and \\(D\\) , and the steady-state solution is: \\[ \\theta_p(t) = A_d \\cos(\\omega t - \\phi) \\] Where the amplitude \\(A_d\\) and phase \\(\\phi\\) are: \\[ A_d = \\frac{f}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\beta \\omega)^2}}, \\quad \\tan\\phi = \\frac{\\beta \\omega}{\\omega_0^2 - \\omega^2} \\] Resonance Conditions Resonance occurs when the driving frequency \\(\\omega\\) approaches the natural frequency \\(\\omega_0\\) . In the linearized case, the amplitude \\(A_d\\) is maximized when: \\[ \\omega \\approx \\sqrt{\\omega_0^2 - \\left(\\frac{\\beta}{2}\\right)^2} \\] At resonance, the system absorbs energy most efficiently from the driving force, leading to large oscillations. Damping ( \\(\\beta\\) ) limits the amplitude, preventing it from becoming infinite as it would in an undamped system. Resonance increases the system\u2019s energy, which can be beneficial (e.g., in energy harvesting) or destructive (e.g., in mechanical structures like bridges). 2. Analysis of Dynamics Influence of Parameters Damping Coefficient ( \\(\\beta\\) ) : Higher damping reduces the amplitude of oscillations and suppresses resonance. For very large \\(\\beta\\) , the system becomes overdamped, and oscillations decay quickly. Driving Amplitude ( \\(f\\) ) : Increasing \\(f\\) increases the amplitude of the steady-state response and can push the system into nonlinear regimes, leading to chaotic behavior. Driving Frequency ( \\(\\omega\\) ) : When \\(\\omega \\approx \\omega_0\\) , resonance occurs. For \\(\\omega \\gg \\omega_0\\) or \\(\\omega \\ll \\omega_0\\) , the response amplitude decreases. Transition to Chaotic Motion For large driving amplitudes or specific combinations of \\(\\beta\\) , \\(f\\) , and \\(\\omega\\) , the nonlinear term \\(\\sin\\theta\\) becomes significant, and the system can exhibit chaotic behavior. This transition is characterized by: - Period Doubling : The pendulum\u2019s motion may double its period repeatedly as \\(f\\) increases, a hallmark of the route to chaos. - Sensitive Dependence on Initial Conditions : Small changes in \\(\\theta(0)\\) or \\(\\dot{\\theta}(0)\\) lead to drastically different trajectories. - Chaotic Attractors : The system\u2019s phase space shows a strange attractor, visible in phase portraits and Poincar\u00e9 sections. 3. Practical Applications The forced damped pendulum model applies to: - Energy Harvesting : Piezoelectric devices can use forced oscillations to convert mechanical energy into electrical energy. - Suspension Bridges : Understanding resonance helps design bridges to avoid catastrophic oscillations (e.g., Tacoma Narrows Bridge collapse). - Oscillating Circuits : Driven RLC circuits behave analogously, with applications in electronics and signal processing. 4. Implementation Below is a Python script to simulate the forced damped pendulum using the 4th-order Runge-Kutta method (RK4). The script visualizes the motion, phase portraits, and Poincar\u00e9 sections for different parameter sets to illustrate resonance and chaotic behavior. ```python import numpy as np import matplotlib.pyplot as plt Parameters g = 9.8 # m/s^2 L = 1.0 # m omega_0 = np.sqrt(g / L) # Natural frequency beta_values = [0.1, 0.5, 1.0] # Damping coefficients (s^-1) f_values = [0.5, 1.2, 2.0] # Driving amplitudes (rad/s^2) omega = 2/3 * omega_0 # Driving frequency (rad/s) Time array t_max = 100 # Total time (s) dt = 0.01 # Time step (s) t = np.arange(0, t_max, dt) N = len(t) Initial conditions theta0 = 0.2 # Initial angle (rad) theta_dot0 = 0.0 # Initial angular velocity (rad/s) Function to compute derivatives def pendulum_derivs(state, t, beta, f, omega, omega_0): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -beta * theta_dot - omega_0**2 * np.sin(theta) + f * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt] Simulate for different parameters for beta in beta_values: for f in f_values: # Arrays to store solution theta = np.zeros(N) theta_dot = np.zeros(N) theta[0] = theta0 theta_dot[0] = theta_dot0 # RK4 integration for i in range(N-1): state = [theta[i], theta_dot[i]] k1 = pendulum_derivs(state, t[i], beta, f, omega, omega_0) state_k2 = [theta[i] + 0.5 * dt * k1[0], theta_dot[i] + 0.5 * dt * k1[1]] k2 = pendulum_derivs(state_k2, t[i] + 0.5 * dt, beta, f, omega, omega_0) state_k3 = [theta[i] + 0.5 * dt * k2[0], theta_dot[i] + 0.5 * dt * k2[1]] k3 = pendulum_derivs(state_k3, t[i] + 0.5 * dt, beta, f, omega, omega_0) state_k4 = [theta[i] + dt * k3[0], theta_dot[i] + dt * k3[1]] k4 = pendulum_derivs(state_k4, t[i] + dt, beta, f, omega, omega_0) theta[i+1] = theta[i] + (dt/6) * (k1[0] + 2*k2[0] + 2*k3[0] + k4[0]) theta_dot[i+1] = theta_dot[i] + (dt/6) * (k1[1] + 2*k2[1] + 2*k3[1] + k4[1]) # Plotting # 1. Time series of theta plt.figure(figsize=(10, 4)) plt.plot(t, theta, label=f'\u03b2={beta}, f={f}') plt.xlabel('Time (s)') plt.ylabel('Angle (rad)') plt.title(f'Forced Damped Pendulum: Angle vs Time (\u03b2={beta}, f={f})') plt.grid(True) plt.legend() plt.show() # 2. Phase portrait plt.figure(figsize=(10, 6)) plt.plot(theta, theta_dot, label=f'\u03b2={beta}, f={f}') plt.xlabel('Angle (rad)') plt.ylabel('Angular Velocity (rad/s)') plt.title(f'Phase Portrait (\u03b2={beta}, f={f})') plt.grid(True) plt.legend() plt.show() # 3. Poincar\u00e9 section poincare_theta = [] poincare_theta_dot = [] period = 2 * np.pi / omega # Period of driving force for i in range(N): if abs(t[i] % period) < dt / 2: # Sample at each driving period poincare_theta.append(theta[i]) poincare_theta_dot.append(theta_dot[i]) plt.figure(figsize=(10, 6)) plt.scatter(poincare_theta, poincare_theta_dot, s=1, color='red', label=f'\u03b2={beta}, f={f}') plt.xlabel('Angle (rad)') plt.ylabel('Angular Velocity (rad/s)') plt.title(f'Poincar\u00e9 Section (\u03b2={beta}, f={f})') plt.grid(True) plt.legend() plt.show() Discussion Limitations The model assumes a constant driving frequency and amplitude, which may not hold in real systems with time-varying forces. Nonlinear damping (e.g., velocity-squared damping) is not considered. The simulation uses a fixed time step, which may introduce numerical errors for highly chaotic regimes. Extensions Nonlinear Damping: Introduce terms like (-\\beta \\dot{\\theta}^2) to model air resistance more realistically. Non-Periodic Driving: Use a stochastic or aperiodic driving force to study more complex dynamics. Bifurcation Analysis: Vary (f) or (\\omega) systematically to plot a bifurcation diagram, showing the transition to chaos. Hints and Resources For small angles, approximate (\\sin \\theta \\approx \\theta) to simplify the differential equation. Employ numerical techniques (e.g., Runge-Kutta methods) for exploring the dynamics beyond the small-angle approximation. Relate the forced damped pendulum to analogous systems in other fields, such as electrical circuits (driven RLC circuits) or biomechanics (human gait). Utilize software tools like Python for simulations and visualizations. This task bridges theoretical analysis with computational exploration, fostering a deeper understanding of forced and damped oscillatory phenomena and their implications in both physics and engineering.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation-of-the-forced-damped-pendulum","text":"The motion of a forced damped pendulum is governed by the following nonlinear differential equation: \\[ \\frac{d^2 \\theta}{dt^2} + b \\frac{d \\theta}{dt} + \\frac{g}{L} \\sin \\theta = A \\cos(\\omega t) \\] Where: - \\(\\theta\\) : Angular displacement of the pendulum (radians). - \\(\\frac{d\\theta}{dt}\\) : Angular velocity ( \\(\\dot{\\theta}\\) ). - \\(\\frac{d^2\\theta}{dt^2}\\) : Angular acceleration ( \\(\\ddot{\\theta}\\) ). - \\(b\\) : Damping coefficient (s \\(^{-1}\\) ). - \\(g\\) : Gravitational acceleration ( \\(9.8 \\, \\text{m/s}^2\\) ). - \\(L\\) : Length of the pendulum (m). - \\(A\\) : Amplitude of the external driving force (rad/s \\(^2\\) ). - \\(\\omega\\) : Driving frequency (rad/s). - \\(t\\) : Time (s). To simplify, we define: - Natural frequency: \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) , - Damping parameter: \\(\\beta = b\\) , - Driving amplitude: \\(f = A\\) . Thus, the equation can be rewritten as: \\[ \\ddot{\\theta} + \\beta \\dot{\\theta} + \\omega_0^2 \\sin\\theta = f \\cos(\\omega t) \\]","title":"Differential Equation of the Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small angles ( \\(\\theta \\ll 1\\) ), we can approximate \\(\\sin\\theta \\approx \\theta\\) . This linearizes the equation: \\[ \\ddot{\\theta} + \\beta \\dot{\\theta} + \\omega_0^2 \\theta = f \\cos(\\omega t) \\] This is the equation of a forced damped harmonic oscillator. The homogeneous solution (without forcing) is: \\[ \\theta_h(t) = e^{-\\frac{\\beta}{2} t} \\left( A_1 \\cos(\\omega_d t) + A_2 \\sin(\\omega_d t) \\right) \\] Where \\(\\omega_d = \\sqrt{\\omega_0^2 - \\left(\\frac{\\beta}{2}\\right)^2}\\) is the damped angular frequency, and \\(A_1\\) and \\(A_2\\) are constants determined by initial conditions. The particular solution (due to the forcing term \\(f \\cos(\\omega t)\\) ) can be found using the method of undetermined coefficients. Assume a solution of the form: \\[ \\theta_p(t) = C \\cos(\\omega t) + D \\sin(\\omega t) \\] Substitute into the linearized equation, solve for \\(C\\) and \\(D\\) , and the steady-state solution is: \\[ \\theta_p(t) = A_d \\cos(\\omega t - \\phi) \\] Where the amplitude \\(A_d\\) and phase \\(\\phi\\) are: \\[ A_d = \\frac{f}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\beta \\omega)^2}}, \\quad \\tan\\phi = \\frac{\\beta \\omega}{\\omega_0^2 - \\omega^2} \\]","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-conditions","text":"Resonance occurs when the driving frequency \\(\\omega\\) approaches the natural frequency \\(\\omega_0\\) . In the linearized case, the amplitude \\(A_d\\) is maximized when: \\[ \\omega \\approx \\sqrt{\\omega_0^2 - \\left(\\frac{\\beta}{2}\\right)^2} \\] At resonance, the system absorbs energy most efficiently from the driving force, leading to large oscillations. Damping ( \\(\\beta\\) ) limits the amplitude, preventing it from becoming infinite as it would in an undamped system. Resonance increases the system\u2019s energy, which can be beneficial (e.g., in energy harvesting) or destructive (e.g., in mechanical structures like bridges).","title":"Resonance Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#influence-of-parameters","text":"Damping Coefficient ( \\(\\beta\\) ) : Higher damping reduces the amplitude of oscillations and suppresses resonance. For very large \\(\\beta\\) , the system becomes overdamped, and oscillations decay quickly. Driving Amplitude ( \\(f\\) ) : Increasing \\(f\\) increases the amplitude of the steady-state response and can push the system into nonlinear regimes, leading to chaotic behavior. Driving Frequency ( \\(\\omega\\) ) : When \\(\\omega \\approx \\omega_0\\) , resonance occurs. For \\(\\omega \\gg \\omega_0\\) or \\(\\omega \\ll \\omega_0\\) , the response amplitude decreases.","title":"Influence of Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaotic-motion","text":"For large driving amplitudes or specific combinations of \\(\\beta\\) , \\(f\\) , and \\(\\omega\\) , the nonlinear term \\(\\sin\\theta\\) becomes significant, and the system can exhibit chaotic behavior. This transition is characterized by: - Period Doubling : The pendulum\u2019s motion may double its period repeatedly as \\(f\\) increases, a hallmark of the route to chaos. - Sensitive Dependence on Initial Conditions : Small changes in \\(\\theta(0)\\) or \\(\\dot{\\theta}(0)\\) lead to drastically different trajectories. - Chaotic Attractors : The system\u2019s phase space shows a strange attractor, visible in phase portraits and Poincar\u00e9 sections.","title":"Transition to Chaotic Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"The forced damped pendulum model applies to: - Energy Harvesting : Piezoelectric devices can use forced oscillations to convert mechanical energy into electrical energy. - Suspension Bridges : Understanding resonance helps design bridges to avoid catastrophic oscillations (e.g., Tacoma Narrows Bridge collapse). - Oscillating Circuits : Driven RLC circuits behave analogously, with applications in electronics and signal processing.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"Below is a Python script to simulate the forced damped pendulum using the 4th-order Runge-Kutta method (RK4). The script visualizes the motion, phase portraits, and Poincar\u00e9 sections for different parameter sets to illustrate resonance and chaotic behavior. ```python import numpy as np import matplotlib.pyplot as plt","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters","text":"g = 9.8 # m/s^2 L = 1.0 # m omega_0 = np.sqrt(g / L) # Natural frequency beta_values = [0.1, 0.5, 1.0] # Damping coefficients (s^-1) f_values = [0.5, 1.2, 2.0] # Driving amplitudes (rad/s^2) omega = 2/3 * omega_0 # Driving frequency (rad/s)","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#time-array","text":"t_max = 100 # Total time (s) dt = 0.01 # Time step (s) t = np.arange(0, t_max, dt) N = len(t)","title":"Time array"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#initial-conditions","text":"theta0 = 0.2 # Initial angle (rad) theta_dot0 = 0.0 # Initial angular velocity (rad/s)","title":"Initial conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#function-to-compute-derivatives","text":"def pendulum_derivs(state, t, beta, f, omega, omega_0): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -beta * theta_dot - omega_0**2 * np.sin(theta) + f * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt]","title":"Function to compute derivatives"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#simulate-for-different-parameters","text":"for beta in beta_values: for f in f_values: # Arrays to store solution theta = np.zeros(N) theta_dot = np.zeros(N) theta[0] = theta0 theta_dot[0] = theta_dot0 # RK4 integration for i in range(N-1): state = [theta[i], theta_dot[i]] k1 = pendulum_derivs(state, t[i], beta, f, omega, omega_0) state_k2 = [theta[i] + 0.5 * dt * k1[0], theta_dot[i] + 0.5 * dt * k1[1]] k2 = pendulum_derivs(state_k2, t[i] + 0.5 * dt, beta, f, omega, omega_0) state_k3 = [theta[i] + 0.5 * dt * k2[0], theta_dot[i] + 0.5 * dt * k2[1]] k3 = pendulum_derivs(state_k3, t[i] + 0.5 * dt, beta, f, omega, omega_0) state_k4 = [theta[i] + dt * k3[0], theta_dot[i] + dt * k3[1]] k4 = pendulum_derivs(state_k4, t[i] + dt, beta, f, omega, omega_0) theta[i+1] = theta[i] + (dt/6) * (k1[0] + 2*k2[0] + 2*k3[0] + k4[0]) theta_dot[i+1] = theta_dot[i] + (dt/6) * (k1[1] + 2*k2[1] + 2*k3[1] + k4[1]) # Plotting # 1. Time series of theta plt.figure(figsize=(10, 4)) plt.plot(t, theta, label=f'\u03b2={beta}, f={f}') plt.xlabel('Time (s)') plt.ylabel('Angle (rad)') plt.title(f'Forced Damped Pendulum: Angle vs Time (\u03b2={beta}, f={f})') plt.grid(True) plt.legend() plt.show() # 2. Phase portrait plt.figure(figsize=(10, 6)) plt.plot(theta, theta_dot, label=f'\u03b2={beta}, f={f}') plt.xlabel('Angle (rad)') plt.ylabel('Angular Velocity (rad/s)') plt.title(f'Phase Portrait (\u03b2={beta}, f={f})') plt.grid(True) plt.legend() plt.show() # 3. Poincar\u00e9 section poincare_theta = [] poincare_theta_dot = [] period = 2 * np.pi / omega # Period of driving force for i in range(N): if abs(t[i] % period) < dt / 2: # Sample at each driving period poincare_theta.append(theta[i]) poincare_theta_dot.append(theta_dot[i]) plt.figure(figsize=(10, 6)) plt.scatter(poincare_theta, poincare_theta_dot, s=1, color='red', label=f'\u03b2={beta}, f={f}') plt.xlabel('Angle (rad)') plt.ylabel('Angular Velocity (rad/s)') plt.title(f'Poincar\u00e9 Section (\u03b2={beta}, f={f})') plt.grid(True) plt.legend() plt.show() Discussion Limitations The model assumes a constant driving frequency and amplitude, which may not hold in real systems with time-varying forces. Nonlinear damping (e.g., velocity-squared damping) is not considered. The simulation uses a fixed time step, which may introduce numerical errors for highly chaotic regimes. Extensions Nonlinear Damping: Introduce terms like (-\\beta \\dot{\\theta}^2) to model air resistance more realistically. Non-Periodic Driving: Use a stochastic or aperiodic driving force to study more complex dynamics. Bifurcation Analysis: Vary (f) or (\\omega) systematically to plot a bifurcation diagram, showing the transition to chaos. Hints and Resources For small angles, approximate (\\sin \\theta \\approx \\theta) to simplify the differential equation. Employ numerical techniques (e.g., Runge-Kutta methods) for exploring the dynamics beyond the small-angle approximation. Relate the forced damped pendulum to analogous systems in other fields, such as electrical circuits (driven RLC circuits) or biomechanics (human gait). Utilize software tools like Python for simulations and visualizations. This task bridges theoretical analysis with computational exploration, fostering a deeper understanding of forced and damped oscillatory phenomena and their implications in both physics and engineering.","title":"Simulate for different parameters"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 \ud83c\udf0d Orbital Period and Orbital Radius Motivation The relationship between the square of the orbital period and the cube of the orbital radius, known as Kepler's Third Law, is a cornerstone of celestial mechanics. This simple yet profound relationship allows for the determination of planetary motions and has implications for understanding gravitational interactions on both local and cosmic scales. By analyzing this relationship, one can connect fundamental principles of gravity with real-world phenomena such as satellite orbits and planetary systems. Derivation for Circular Orbits Kepler's Third Law describes the relationship between the orbital period \ud835\udc47 T and the orbital radius \ud835\udc5f r. Let\u2019s derive this relationship for circular orbits. Gravitational Force = Centripetal Force The gravitational force acting between two objects (e.g., the Earth and the Moon) is given by: $$ \\frac{GMm}{r^2} = \\frac{mv^2}{r} $$ Here: \ud835\udc3a G is the gravitational constant. \ud835\udc40 M is the mass of the central body (Earth). \ud835\udc5a m is the mass of the orbiting body (Moon). \ud835\udc5f r is the distance between the two bodies. \ud835\udc63 v is the orbital velocity of the orbiting body. 2. Simplifying the Equation We can cancel out the mass of the orbiting body \ud835\udc5a m and solve for the velocity \ud835\udc63 v: $$ v^2 = \\frac{GM}{r} $$ 3. Relating Orbital Velocity to Orbital Period The orbital velocity \ud835\udc63 v is related to the orbital period \ud835\udc47 T by the equation: $$ v = \\frac{2\\pi r}{T} $$ 4. Substitute the Velocity Expression Now, we substitute the expression for \ud835\udc63 v into the previous equation: $$ \\left( \\frac{2\\pi r}{T} \\right)^2 = \\frac{GM}{r} $$ 5. Solve for the Orbital Period Simplifying the above equation: $$ \\frac{4\\pi^2 r^2}{T^2} = \\frac{GM}{r} T^2 = \\frac{4\\pi^2}{GM} \\cdot r^3 $$ This is Kepler\u2019s Third Law for circular orbits. It shows that the square of the orbital period is proportional to the cube of the orbital radius. \ud83c\udf0c Generalization to Elliptical Orbits For elliptical orbits, the semi-major axis \ud835\udc4e a replaces the orbital radius \ud835\udc5f r, and the masses of both bodies are taken into account. The generalized form of Kepler's Third Law for elliptical orbits is: $$ T^2 = \\frac{4\\pi^2}{G(M + m)} \\cdot a^3 $$ Here: \ud835\udc40 M is the mass of the central body (e.g., the Sun). \ud835\udc5a m is the mass of the orbiting body (e.g., a planet). \ud835\udc4e a is the semi-major axis of the elliptical orbit. \ud83c\udf11 Real-World Example: The Moon and the Earth To apply Kepler\u2019s Third Law to the Moon\u2019s orbit around Earth: Average orbital radius \ud835\udc5f=3.84\u00d7108m r=3.84\u00d7108m Orbital period \ud835\udc47\u224827.3 \u2009 days=2.36\u00d710s T\u224827.3days=2.36\u00d710s Using Kepler\u2019s Third Law: $$ T^2 = \\frac{4\\pi^2}{GM} \\cdot r^3 $$ This allows us to calculate the mass of the Earth or verify the Moon\u2019s orbital parameters. \ud83d\udcbb Simulation and Visualization To simulate circular orbits and verify the relationship between orbital period and radius, we can write Python code. The relationship For example, the Python code could look like this: ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # Gravitational constant in m^3 kg^-1 s^-2 M = 5.972e24 # Mass of Earth in kg Define orbital radii (in meters) radii = np.linspace(1e7, 1e8, 100) Calculate orbital period squared (T^2 = 4\u03c0^2 * r^3 / GM) T_squared = (4 * np.pi 2 * radii 3) / (G * M) Plot the relationship plt.plot(radii**3, T_squared) plt.xlabel('r^3 (m^3)') plt.ylabel('T^2 (s^2)') plt.title('Kepler\u2019s Third Law: T^2 vs r^3 for Circular Orbits') plt.grid(True) plt.show()","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"\ud83c\udf0d Orbital Period and Orbital Radius Motivation The relationship between the square of the orbital period and the cube of the orbital radius, known as Kepler's Third Law, is a cornerstone of celestial mechanics. This simple yet profound relationship allows for the determination of planetary motions and has implications for understanding gravitational interactions on both local and cosmic scales. By analyzing this relationship, one can connect fundamental principles of gravity with real-world phenomena such as satellite orbits and planetary systems. Derivation for Circular Orbits Kepler's Third Law describes the relationship between the orbital period \ud835\udc47 T and the orbital radius \ud835\udc5f r. Let\u2019s derive this relationship for circular orbits. Gravitational Force = Centripetal Force The gravitational force acting between two objects (e.g., the Earth and the Moon) is given by: $$ \\frac{GMm}{r^2} = \\frac{mv^2}{r} $$ Here: \ud835\udc3a G is the gravitational constant. \ud835\udc40 M is the mass of the central body (Earth). \ud835\udc5a m is the mass of the orbiting body (Moon). \ud835\udc5f r is the distance between the two bodies. \ud835\udc63 v is the orbital velocity of the orbiting body. 2. Simplifying the Equation We can cancel out the mass of the orbiting body \ud835\udc5a m and solve for the velocity \ud835\udc63 v: $$ v^2 = \\frac{GM}{r} $$ 3. Relating Orbital Velocity to Orbital Period The orbital velocity \ud835\udc63 v is related to the orbital period \ud835\udc47 T by the equation: $$ v = \\frac{2\\pi r}{T} $$ 4. Substitute the Velocity Expression Now, we substitute the expression for \ud835\udc63 v into the previous equation: $$ \\left( \\frac{2\\pi r}{T} \\right)^2 = \\frac{GM}{r} $$ 5. Solve for the Orbital Period Simplifying the above equation: $$ \\frac{4\\pi^2 r^2}{T^2} = \\frac{GM}{r} T^2 = \\frac{4\\pi^2}{GM} \\cdot r^3 $$ This is Kepler\u2019s Third Law for circular orbits. It shows that the square of the orbital period is proportional to the cube of the orbital radius. \ud83c\udf0c Generalization to Elliptical Orbits For elliptical orbits, the semi-major axis \ud835\udc4e a replaces the orbital radius \ud835\udc5f r, and the masses of both bodies are taken into account. The generalized form of Kepler's Third Law for elliptical orbits is: $$ T^2 = \\frac{4\\pi^2}{G(M + m)} \\cdot a^3 $$ Here: \ud835\udc40 M is the mass of the central body (e.g., the Sun). \ud835\udc5a m is the mass of the orbiting body (e.g., a planet). \ud835\udc4e a is the semi-major axis of the elliptical orbit. \ud83c\udf11 Real-World Example: The Moon and the Earth To apply Kepler\u2019s Third Law to the Moon\u2019s orbit around Earth: Average orbital radius \ud835\udc5f=3.84\u00d7108m r=3.84\u00d7108m Orbital period \ud835\udc47\u224827.3 \u2009 days=2.36\u00d710s T\u224827.3days=2.36\u00d710s Using Kepler\u2019s Third Law: $$ T^2 = \\frac{4\\pi^2}{GM} \\cdot r^3 $$ This allows us to calculate the mass of the Earth or verify the Moon\u2019s orbital parameters. \ud83d\udcbb Simulation and Visualization To simulate circular orbits and verify the relationship between orbital period and radius, we can write Python code. The relationship For example, the Python code could look like this: ```python import numpy as np import matplotlib.pyplot as plt","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants","text":"G = 6.67430e-11 # Gravitational constant in m^3 kg^-1 s^-2 M = 5.972e24 # Mass of Earth in kg","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#define-orbital-radii-in-meters","text":"radii = np.linspace(1e7, 1e8, 100)","title":"Define orbital radii (in meters)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#calculate-orbital-period-squared-t2-42-r3-gm","text":"T_squared = (4 * np.pi 2 * radii 3) / (G * M)","title":"Calculate orbital period squared (T^2 = 4\u03c0^2 * r^3 / GM)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plot-the-relationship","text":"plt.plot(radii**3, T_squared) plt.xlabel('r^3 (m^3)') plt.ylabel('T^2 (s^2)') plt.title('Kepler\u2019s Third Law: T^2 vs r^3 for Circular Orbits') plt.grid(True) plt.show()","title":"Plot the relationship"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}